// === Dashboard LAYOUT ===
import {NextIntlClientProvider, hasLocale} from 'next-intl';
import {notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import Styles from './dashboardLayout.module.css'
import type { Metadata } from "next";
import "../../../globals.css";
import app_identity from '@/app/config/identity';
import ExpirationGuard from '@/app/providers/ExpirationGuard';

import { cookies  } from 'next/headers';
import encryption from '@/app/utils/encryption';


export const metadata: Metadata = {
  title: "LAEQ365",
  description: "Generated by LAEQ365",
};

// ===== Server Action لتحديث الكوكيز =====


import Nave from '@/app/components/dashboard/Nave/Nave';
import Aside from '@/app/components/dashboard/Aside/Aside';








export default async function DashboardLayout({
  children,
  params
}: {
  children: React.ReactNode;
  params: Promise<{locale: string}>;
}) {
  // Ensure that the incoming `locale` is valid
  const {locale} = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  let messages;
  try {
    messages = (await import(`@/locales/${locale}.json`)).default;
  } catch (error) {;
    console.log(error)
    notFound(); // في حالة عدم العثور على ملف الترجمة
  }
  const cookieStore = await cookies();

  //  ==== Get Path To Dont do this func in payment screen====
  const pathName =  cookieStore.get('clickedAsideTitle')?.value ?? "";
  console.warn("pathName COOKIE VALUE :: ", pathName);
  console.warn("pathName COOKIE VALUE == payments_plans :: ", pathName == "payments_plans");


  // === Get Token From Cookies ==
    const infoToken =  cookieStore.get('AccountInfo')?.value ?? "";
    const key = process.env.NEXT_PUBLIC_HASH_KEY as string;
    const decryptionResult  =  encryption.decryption(infoToken,key)
    // Safely parse decrypted cookie value to avoid crashing on empty/invalid JSON
    let info: {userDetails:{end_date:string}} | null = null;
    if (decryptionResult) {
      const trimmed = String(decryptionResult).trim();
      if (trimmed && trimmed !== "null" && trimmed !== "undefined" && (trimmed.startsWith("{") || trimmed.startsWith("["))) {
        try {
          info = JSON.parse(trimmed);
        } catch (err) {
          console.error("Invalid AccountInfo cookie:", err);
        }
      }
    }
    console.warn("INFO FROM SERVER :: ",info);
    
    const endDate = info?.userDetails?.end_date
    ? new Date(info.userDetails.end_date).getTime()
    : null;

  const now = Date.now();
  const isExpired = endDate ? endDate < now : false;
  console.warn("pathName isExpired  VALUE :: ", isExpired);
    // const token =  cookieStore.get('token')?.value;

  
  // if (!token) {
    
  //     const res = await Check_Authenticated.Protected_page_verify()
  //     const isAuthenticated = await res.isAuthenticated
    
  //     if (!isAuthenticated) {
  //       // console.log("isAuthenticated : ",isAuthenticated)
  //         redirect(`/${locale}/Screens/forms/login`);
  //     }
  // }

  // const res = await Check_Authenticated.Protected_page_verify();
  // const isAuthenticated = res?.isAuthenticated;

  // if (!isAuthenticated) {
  //   redirect(`/${locale}/Screens/forms/login`);
  // }





  return (
    <div style={{fontFamily:app_identity.primary_font,overflow:'hidden'}}  className={Styles.main_layout} lang={locale}>
        <NextIntlClientProvider locale={locale} messages={messages}>
            <Aside/>
            <Nave/>
            <main style={{gridColumn:2,background:"#EEEEEE80",overflow:'auto'}}>
              <ExpirationGuard locale={locale}>
                {children}
              </ExpirationGuard>
            </main>
        </NextIntlClientProvider>

    </div>
  );

}